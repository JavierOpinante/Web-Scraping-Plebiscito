mapview(mapa_sf)
dev.off()
install.packages("Rcade")
devtools::install_github('RLesur/Rcade')
library(Rcade)
library(Rcade)
Rcade::games
?games
games$Pacman
library(tidyverse)
datos <- read_csv("DatosPlebiscito.csv")
datos
datos %>%
group_by(Region) %>%
summarise(Apruebo = sum(Apruebo))
datos %>%
group_by(Region)
View(datos)
datos <- read_csv("DatosPlebiscito.csv")
datos <- read_csv("DatosPlebiscito.csv") %>%
distinct()
View(datos)
datos <- read_csv("DatosPlebiscito.csv") %>%
distinct()
View(datos)
datos <- read_csv("DatosPlebiscito.csv") %>%
distinct()
datos %>%
group_by(Region) %>%
summarise(Apruebo = sum(Apruebo))
datos %>%
#group_by(Region) %>%
summarise(Apruebo = sum(Apruebo))
datos <- read_csv("DatosPlebiscito2.csv") %>%
distinct()
datos %>%
#group_by(Region) %>%
summarise(Apruebo = sum(Apruebo))
datos %>%
write_excel_csv("DatosPlebiscito.csv")
datos <- read_csv("DatosPlebiscito.csv") %>%
distinct()
datos %>%
#group_by(Region) %>%
summarise(Apruebo = sum(Apruebo))
datos %>%
#group_by(Region) %>%
summarise(Apruebo = sum(Apruebo))
datos %>%
#group_by(Region) %>%
summarise(Apruebo = sum(Apruebo).
Rechazo = sum(Rechazo))
datos <- read_csv("DatosPlebiscito.csv") %>%
distinct()
datos %>%
#group_by(Region) %>%
summarise(Apruebo = sum(Apruebo).
Rechazo = sum(Rechazo))
datos %>%
#group_by(Region) %>%
summarise(Apruebo = sum(Apruebo),
Rechazo = sum(Rechazo))
datos %>%
summarise(Apruebo = sum(Apruebo),
Rechazo = sum(Rechazo),
Nulo = sum(Nulo))
datos %>%
summarise(Apruebo = sum(Apruebo),
Rechazo = sum(Rechazo),
Nulo = sum(Nulo),
Blanco = sum(Blanco))
library(RSelenium)
library(rvest)
library(openxlsx)
library(tidyverse)
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4445L,
browser = "firefox"
)
rd <- remDr$client
# Ir a la web del SERVEL
url <- 'http://www.servelelecciones.cl/'
#rd$open()
rd$navigate(url)
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = "body > div.container.body.ng-scope > div:nth-child(1) > div.col-md-3.margen_cero.visible-desktop.visible-tablet > div > ul > li:nth-child(3) > a"
)$clickElement()
#rd$open()
rd$navigate(url)
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = "li.active:nth-child(3) > a:nth-child(1)"
)$clickElement()
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = ".menu_division > li:nth-child(3)"
)$clickElement()
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = ".menu_division > li:nth-child(3)"
)$clickElement()
#rd$open()
rd$navigate(url)
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = ".menu_division > li:nth-child(3)"
)$clickElement()
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = "body > div.container.body.ng-scope > div:nth-child(1) > div.col-md-3.margen_cero.visible-desktop.visible-tablet > div > ul > li:nth-child(3) > a"
)$clickElement()
#rd$open()
rd$navigate(url)
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = "body > div.container.body.ng-scope > div:nth-child(1) > div.col-md-3.margen_cero.visible-desktop.visible-tablet > div > ul > li:nth-child(3) > a"
)$clickElement()
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = "body > div.container.body.ng-scope > div:nth-child(1) > div.col-md-3.margen_cero.visible-desktop.visible-tablet > div > ul > li:nth-child(3) > a"
)$clickElement()
#####################################
# Crear listas de regiones y comuna #
#####################################
# Función de ayuda
limpiar_lista <- function(x){
x %>%
str_extract_all(">(.*?)<") %>%
data.frame() %>% as_tibble() %>%
rename(nombre = 1) %>%
filter(nombre != "><",
!str_detect(nombre, "\\.\\.\\.")) %>%
mutate(nombre = str_remove(nombre, ">"),
nombre = str_remove(nombre, "<")) %>%
mutate(inicial = str_sub(nombre, 1, 1)) %>%
arrange(inicial)
}
# Objeto que identifica la lista de regiones y comunas
webElemRegion <- rd$findElement(using = "css",
value = "#selRegion")
# Extraer lista y limpiar
lista_regiones <- webElemRegion$getElementAttribute("outerHTML") %>%
limpiar_lista()
lista_regiones
seq_along(lista_regiones$inicial)
r <- 1
# inicial de la region
ini_reg <- lista_regiones$inicial[r]
# insertar inicial en menú desplegable de web
webElemRegion <- rd$findElement(using = "css",
value = "#selRegion")
webElemRegion$sendKeysToElement(list(ini_reg))
# Generar lista de comunas
webElemComuna <- rd$findElement(using = "css",
value = "#selComunas")
lista_comunas <- webElemComuna$getElementAttribute("outerHTML") %>%
limpiar_lista()
com_r <- lista_comunas %>%
mutate(reg = lista_regiones$nombre[r])
reg_com <- bind_rows(reg_com, com_r)
# Extraer lista de comunas para cada región
reg_com <- tibble()
reg_com <- bind_rows(reg_com, com_r)
reg_com
i <- 1
datos_comuna <- tibble() # data frame que almacenará resultados
# inicial de la comuna
c <- reg_com$inicial[i]
# insertar inicial en menú desplegable de web
webElemComuna <- rd$findElement(using = "css",
value = "#selComunas")
webElemComuna$sendKeysToElement(list(c))
# Votos apruebo
webElemApruebo <- rd$findElement(using = "css", value = "#basic-table > table > tbody:nth-child(2) > tr:nth-child(2) > td:nth-child(3) > small > span")
apruebo <- webElemApruebo$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
apruebo
for (i in seq_along(reg_com$inicial)){
# inicial de la comuna
c <- reg_com$inicial[i]
# insertar inicial en menú desplegable de web
webElemComuna <- rd$findElement(using = "css",
value = "#selComunas")
webElemComuna$sendKeysToElement(list(c))
# Votos apruebo
webElemApruebo <- rd$findElement(using = "css", value = "#basic-table > table > tbody:nth-child(2) > tr:nth-child(2) > td:nth-child(3) > small > span")
apruebo <- webElemApruebo$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
Sys.sleep(0.5)
# Votos rechazo
webElemRechazo <- rd$findElement(using = "css", value = "#basic-table > table > tbody:nth-child(2) > tr:nth-child(5) > td:nth-child(3) > small > span")
rechazo <- webElemRechazo$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
Sys.sleep(0.5)
# Votos nulo
webElemNulo <- rd$findElement(using = "css", value = "#basic-table > table > tfoot > tr:nth-child(2) > th:nth-child(2) > strong")
nulo <- webElemNulo$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
Sys.sleep(0.5)
# Votos blanco
webElemBlanco <- rd$findElement(using = "css", value = "#basic-table > table > tfoot > tr:nth-child(3) > th:nth-child(2) > strong")
blanco <- webElemBlanco$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
# Ingresar valores en data frame
datos_comuna[i,1] <- reg_com$reg[i]
datos_comuna[i,2] <- reg_com$nombre[i]
datos_comuna[i,3] <- apruebo
datos_comuna[i,4] <- rechazo
datos_comuna[i,5] <- nulo
datos_comuna[i,6] <- blanco
# Reportar en cada iteración resultados
datos_comuna %>%
slice(i) %>% print()
cbind(nrow(dplyr::distinct(dplyr::select(datos_comuna, `...1`))), nrow(datos_comuna)) %>% print()
Sys.sleep(0.5)
}
#rd$open()
rd$navigate(url)
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = "body > div.container.body.ng-scope > div:nth-child(1) > div.col-md-3.margen_cero.visible-desktop.visible-tablet > div > ul > li:nth-child(3) > a"
)$clickElement()
#rd$open()
rd$navigate(url)
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = "li.active:nth-child(5) > a:nth-child(1)"
)$clickElement()
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = ".menu_division > li:nth-child(3) > a:nth-child(1)"
)$clickElement()
# Objeto que identifica la lista de regiones y comunas
webElemRegion <- rd$findElement(using = "css",
value = "#selRegion")
# Extraer lista y limpiar
lista_regiones <- webElemRegion$getElementAttribute("outerHTML") %>%
limpiar_lista()
# Extraer lista de comunas para cada región
reg_com <- tibble()
for (r in seq_along(lista_regiones$inicial)){
# inicial de la region
ini_reg <- lista_regiones$inicial[r]
Sys.sleep(0.5)
# insertar inicial en menú desplegable de web
webElemRegion <- rd$findElement(using = "css",
value = "#selRegion")
webElemRegion$sendKeysToElement(list(ini_reg))
Sys.sleep(0.5)
# Generar lista de comunas
webElemComuna <- rd$findElement(using = "css",
value = "#selComunas")
lista_comunas <- webElemComuna$getElementAttribute("outerHTML") %>%
limpiar_lista()
Sys.sleep(0.5)
com_r <- lista_comunas %>%
mutate(reg = lista_regiones$nombre[r])
Sys.sleep(0.5)
reg_com <- bind_rows(reg_com, com_r)
}
reg_com <- reg_com %>%
arrange(nombre)
reg_com
datos_comuna <- tibble() # data frame que almacenará resultados
i <- 1
# inicial de la comuna
c <- reg_com$inicial[i]
# insertar inicial en menú desplegable de web
webElemComuna <- rd$findElement(using = "css",
value = "#selComunas")
webElemComuna$sendKeysToElement(list(c))
rd$navigate(url)
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = ".menu_division > li:nth-child(3) > a:nth-child(1)"
)$clickElement()
# inicial de la comuna
c <- reg_com$inicial[i]
# insertar inicial en menú desplegable de web
webElemComuna <- rd$findElement(using = "css",
value = "#selComunas")
webElemComuna$sendKeysToElement(list(c))
webElemComuna$sendKeysToElement(list(c))
webElemComuna$sendKeysToElement(list(c))
webElemComuna$sendKeysToElement(list(c))
webElemComuna$sendKeysToElement(list(c))
webElemComuna$sendKeysToElement(list(c))
webElemComuna$sendKeysToElement(list(c))
webElemComuna$sendKeysToElement(list(c))
#rd$open()
rd$navigate(url)
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = ".menu_division > li:nth-child(3) > a:nth-child(1)"
)$clickElement()
#####################################
# Crear listas de regiones y comuna #
#####################################
# Función de ayuda
limpiar_lista <- function(x){
x %>%
str_extract_all(">(.*?)<") %>%
data.frame() %>% as_tibble() %>%
rename(nombre = 1) %>%
filter(nombre != "><",
!str_detect(nombre, "\\.\\.\\.")) %>%
mutate(nombre = str_remove(nombre, ">"),
nombre = str_remove(nombre, "<")) %>%
mutate(inicial = str_sub(nombre, 1, 1)) %>%
arrange(inicial)
}
# Objeto que identifica la lista de regiones y comunas
webElemRegion <- rd$findElement(using = "css",
value = "#selRegion")
# Extraer lista y limpiar
lista_regiones <- webElemRegion$getElementAttribute("outerHTML") %>%
limpiar_lista()
# Extraer lista de comunas para cada región
reg_com <- tibble()
for (r in seq_along(lista_regiones$inicial)){
# inicial de la region
ini_reg <- lista_regiones$inicial[r]
Sys.sleep(0.5)
# insertar inicial en menú desplegable de web
webElemRegion <- rd$findElement(using = "css",
value = "#selRegion")
webElemRegion$sendKeysToElement(list(ini_reg))
Sys.sleep(0.5)
# Generar lista de comunas
webElemComuna <- rd$findElement(using = "css",
value = "#selComunas")
lista_comunas <- webElemComuna$getElementAttribute("outerHTML") %>%
limpiar_lista()
Sys.sleep(0.5)
com_r <- lista_comunas %>%
mutate(reg = lista_regiones$nombre[r])
Sys.sleep(0.5)
reg_com <- bind_rows(reg_com, com_r)
}
reg_com
reg_com <- reg_com %>%
arrange(nombre)
reg_com
View(reg_com)
rd$navigate(url)
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = ".menu_division > li:nth-child(3) > a:nth-child(1)"
)$clickElement()
datos_comuna <- tibble() # data frame que almacenará resultados
for (i in seq_along(reg_com$inicial)){
# inicial de la comuna
c <- reg_com$inicial[i]
# insertar inicial en menú desplegable de web
webElemComuna <- rd$findElement(using = "css",
value = "#selComunas")
webElemComuna$sendKeysToElement(list(c))
# Votos apruebo
webElemApruebo <- rd$findElement(using = "css", value = "#basic-table > table > tbody:nth-child(2) > tr:nth-child(2) > td:nth-child(3) > small > span")
apruebo <- webElemApruebo$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
Sys.sleep(0.5)
# Votos rechazo
webElemRechazo <- rd$findElement(using = "css", value = "#basic-table > table > tbody:nth-child(2) > tr:nth-child(5) > td:nth-child(3) > small > span")
rechazo <- webElemRechazo$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
Sys.sleep(0.5)
# Votos nulo
webElemNulo <- rd$findElement(using = "css", value = "#basic-table > table > tfoot > tr:nth-child(2) > th:nth-child(2) > strong")
nulo <- webElemNulo$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
Sys.sleep(0.5)
# Votos blanco
webElemBlanco <- rd$findElement(using = "css", value = "#basic-table > table > tfoot > tr:nth-child(3) > th:nth-child(2) > strong")
blanco <- webElemBlanco$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
# Ingresar valores en data frame
datos_comuna[i,1] <- reg_com$reg[i]
datos_comuna[i,2] <- reg_com$nombre[i]
datos_comuna[i,3] <- apruebo
datos_comuna[i,4] <- rechazo
datos_comuna[i,5] <- nulo
datos_comuna[i,6] <- blanco
# Reportar en cada iteración resultados
datos_comuna %>%
slice(i) %>% print()
cbind(nrow(dplyr::distinct(dplyr::select(datos_comuna, `...1`))), nrow(datos_comuna)) %>% print()
Sys.sleep(0.5)
}
datos_comuna <- tibble() # data frame que almacenará resultados
for (i in seq_along(reg_com$inicial)){
# inicial de la comuna
c <- reg_com$inicial[i]
# insertar inicial en menú desplegable de web
webElemComuna <- rd$findElement(using = "css",
value = "#selComunas")
webElemComuna$sendKeysToElement(list(c))
# Votos apruebo
webElemApruebo <- rd$findElement(using = "css", value = "#basic-table > table > tbody:nth-child(2) > tr:nth-child(2) > td:nth-child(3) > small > span")
apruebo <- webElemApruebo$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
Sys.sleep(0.5)
# Votos rechazo
webElemRechazo <- rd$findElement(using = "css", value = "#basic-table > table > tbody:nth-child(2) > tr:nth-child(5) > td:nth-child(3) > small > span")
rechazo <- webElemRechazo$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
Sys.sleep(0.5)
# Votos nulo
webElemNulo <- rd$findElement(using = "css", value = "#basic-table > table > tfoot > tr:nth-child(2) > th:nth-child(2) > strong")
nulo <- webElemNulo$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
Sys.sleep(0.5)
# Votos blanco
webElemBlanco <- rd$findElement(using = "css", value = "#basic-table > table > tfoot > tr:nth-child(3) > th:nth-child(2) > strong")
blanco <- webElemBlanco$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
# Ingresar valores en data frame
datos_comuna[i,1] <- reg_com$reg[i]
datos_comuna[i,2] <- reg_com$nombre[i]
datos_comuna[i,3] <- apruebo
datos_comuna[i,4] <- rechazo
datos_comuna[i,5] <- nulo
datos_comuna[i,6] <- blanco
# Reportar en cada iteración resultados
datos_comuna %>%
slice(i) %>% print()
cbind(nrow(dplyr::distinct(dplyr::select(datos_comuna, `...1`))), nrow(datos_comuna)) %>% print()
Sys.sleep(0.5)
}
datos_comuna <- tibble() # data frame que almacenará resultados
datos_comuna <- tibble() # data frame que almacenará resultados
for (i in seq_along(reg_com$inicial)){
# inicial de la comuna
c <- reg_com$inicial[i]
# insertar inicial en menú desplegable de web
webElemComuna <- rd$findElement(using = "css",
value = "#selComunas")
webElemComuna$sendKeysToElement(list(c))
# Votos apruebo
webElemApruebo <- rd$findElement(using = "css", value = "#basic-table > table > tbody:nth-child(2) > tr:nth-child(2) > td:nth-child(3) > small > span")
apruebo <- webElemApruebo$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
Sys.sleep(0.5)
# Votos rechazo
webElemRechazo <- rd$findElement(using = "css", value = "#basic-table > table > tbody:nth-child(2) > tr:nth-child(5) > td:nth-child(3) > small > span")
rechazo <- webElemRechazo$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
Sys.sleep(0.5)
# Votos nulo
webElemNulo <- rd$findElement(using = "css", value = "#basic-table > table > tfoot > tr:nth-child(2) > th:nth-child(2) > strong")
nulo <- webElemNulo$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
Sys.sleep(0.5)
# Votos blanco
webElemBlanco <- rd$findElement(using = "css", value = "#basic-table > table > tfoot > tr:nth-child(3) > th:nth-child(2) > strong")
blanco <- webElemBlanco$getElementText()[[1]] %>%
str_remove("\\.") %>%
as.numeric()
# Ingresar valores en data frame
datos_comuna[i,1] <- reg_com$reg[i]
datos_comuna[i,2] <- reg_com$nombre[i]
datos_comuna[i,3] <- apruebo
datos_comuna[i,4] <- rechazo
datos_comuna[i,5] <- nulo
datos_comuna[i,6] <- blanco
# Reportar en cada iteración resultados
datos_comuna %>%
slice(i) %>% print()
cbind(nrow(dplyr::distinct(dplyr::select(datos_comuna, `...1`))), nrow(datos_comuna)) %>% print()
Sys.sleep(0.5)
}
rd$closeServer();rd$close();remDr$server$stop()
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4445L,
browser = "firefox"
)
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4446L,
browser = "firefox"
)
remDr <- rsDriver(
remoteServerAddr = "localhost",
port = 4449L,
browser = "firefox"
)
rd$closeServer();rd$close();remDr$server$stop()
# Ir a la pag específica de la extracción
rd$findElement(using = "css",
value = ".menu_division > li:nth-child(3) > a:nth-child(1)"
)$clickElement()
rd <- remDr$client
rd$closeServer();rd$close();remDr$server$stop()
